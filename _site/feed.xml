<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luis Melo</title>
    <description>I'm a Portuguese UX/UI designer, front-end developer and also experienced with backend development, aiming to create usefull, clean and user-centered web and mobile experiences.	
</description>
    <link>https://luisfbmelo.github.io//</link>
    <atom:link href="https://luisfbmelo.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 22 Jun 2020 23:06:44 +0000</pubDate>
    <lastBuildDate>Mon, 22 Jun 2020 23:06:44 +0000</lastBuildDate>
    <generator>Jekyll v3.8.7</generator>
    
      <item>
        <title>Carolina &amp; Tiago - Engagement Photoshoot</title>
        <description>&lt;p class=&quot;text-center&quot;&gt;
I’m very happy to have the opportunity to document the love between two amazing people, Carolina and Tiago. I must confess that I was a little anxious because the weather as a little unstable, but the photoshoot was just perfect! Not too sunny, but not too cloudy, just the enough to enjoy the natural light that was available and create a very relaxed and passionate mood. And this couple is just awesome, very friendly and funny, which made this session a lot easier.

For the full photoshoot, just go to the &lt;a href=&quot;https://luisfbmelo.pixieset.com/carolinaetiago-noivado/&quot; target=&quot;_blank&quot;&gt;online gallery&lt;/a&gt;.
&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
Now, let's wait for their wedding day! I know it will be perfect for them and to capture amazing photographs!
&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;
Thank you Carolina &amp;amp; Tiago for trusting me to document this stage of your life!
&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/1.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/1.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/2.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/2.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/3.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/3.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/3_1.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/3_1.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/4.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/4.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/5.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/5.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/6.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/6.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/6_1.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/6_1.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/7.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/7.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/8.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/8.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/8_1.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/8_1.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/9.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/9.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/10.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/10.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/10_1.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/10_1.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/11.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/11.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/12.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/12.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/13.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/13.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/14.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/14.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/14_1.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/14_1.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/14_2.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/14_2.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/15.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/15.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/15_1.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/15_1.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/16.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/16.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/17.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2018-08-10-carolina-tiago-engagement-photography/17.jpg&quot; alt=&quot;C&amp;amp;T&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Aug 2018 11:00:00 +0000</pubDate>
        <link>https://luisfbmelo.github.io//blog/2018/08/10/carolina-tiago-engagement-photography/</link>
        <guid isPermaLink="true">https://luisfbmelo.github.io//blog/2018/08/10/carolina-tiago-engagement-photography/</guid>
        
        
        <category>photography</category>
        
        <category>portrait</category>
        
        <category>wedding</category>
        
        <category>engagement</category>
        
      </item>
    
      <item>
        <title>Server Side Rendering in ReactJS - from v15 to v16</title>
        <description>&lt;p class=&quot;text-center&quot;&gt;This was a year of big changes in the ReactJS world, with the coming of a new version, v16. And one of those affected the Server Side Rendering scripts used in the old version, v15.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/2017-12-15-react-16-server-side-rendering/thumb/react-ssr.jpg&quot; alt=&quot;React v16 SSR!&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-ssr-works-in-react-15&quot;&gt;How SSR Works In React 15&lt;/h1&gt;
&lt;p&gt;First, let’s have a look of how SSR works in React 15. To do so, it is necessary to run a Node server (Express in my case), and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renderToString&lt;/code&gt; in order to get the rendered elements and include them as HTML when ending the response.&lt;/p&gt;

&lt;p&gt;So, it should start with the store construction, in order to create the initial view, and check any routing match:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.use(function(req, res){
  // Create store with the middlewares that you need, the `createStore` method from Redux and your reducers
  const store = applyMiddleware(multi, thunkMiddleware, apiMiddleware)(createStore)(reducers);

  // Check any match with the given routes and current request location
  match({ routes: appRoutes, location: req.url }, function(err, redirectLocation, renderProps){
    
    // Handle server error
    if(err) {
      console.error(err);
      return res.status(500).end('Internal server error');
    }

    // If no match based on the props for the routing context, then give 404
    if(!renderProps)
      return res.status(404).end('Not found');

    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, it is necessary to start provide the Routing components with the given context in renderProps and return the HTML that will be filled with the initialState and the rendered React Components, from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReactDOM.renderToString()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ...

  function renderView() {
    // Start initial view with the store data and routing context
    const InitialView = (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;RouterContext {...renderProps} /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );

    // Render ReactJS Components
    const componentHTML = ReactDOM.renderToString(InitialView);      

    // Get initial state from store to append in the DOM
    const initialState = store.getState();

    // Set HTML with the initial state and rendered components
    const HTML = `
      &amp;lt;!DOCTYPE html&amp;gt;
        &amp;lt;head&amp;gt;
          &amp;lt;title&amp;gt;This is a SSR post&amp;lt;/title&amp;gt;
          &amp;lt;script&amp;gt;
            window.__INITIAL_STATE__ = ${JSON.stringify(initialState)};
          &amp;lt;/script&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;body&amp;gt;
          &amp;lt;div id=&quot;site-canvas&quot;&amp;gt;&amp;lt;div&amp;gt;${componentHTML}&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/body&amp;gt;
       &amp;lt;/html&amp;gt;`;
    return HTML;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Have in mind that it is necessary to have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Provider /&amp;gt;&lt;/code&gt; component as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Router /&amp;gt;&lt;/code&gt; ancestor in order to work.&lt;/p&gt;

&lt;p&gt;In the end, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renderView&lt;/code&gt; function is called after fetching the components data, sending the final HTML to the client:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ...
  
  fetchComponentData(store.dispatch, renderProps.components, renderProps.params)
      .then(renderView)
      .then(html =&amp;gt; res.end(html))
      .catch(err =&amp;gt; res.json({message:err.message}));

}); // Closing `app.use()`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;About this last line of code, you should have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;needs&lt;/code&gt; variable inside each parent component. In my way of organizing the components, I create a wrapper component called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; that wraps all components, and after that wrapper, there is a component for each route (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;AppsPage /&amp;gt;&lt;/code&gt;). Inside each page component, there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;needs&lt;/code&gt; variable with all the actions that should be despatched before sending the final HTML to the client:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AppsPage.needs = [    
    fetchConfig,
    fetchApps
];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and my routing looks like so:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Route path=&quot;/&quot; name=&quot;Index&quot; component={App}&amp;gt;
    &amp;lt;Route name=&quot;Applications&quot; path=&quot;Apps&quot; component={AppsPage} /&amp;gt;
&amp;lt;/Route&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;how-ssr-works-in-react-16&quot;&gt;How SSR Works In React 16&lt;/h1&gt;

&lt;h3 id=&quot;render-becomes-hydrate&quot;&gt;render() Becomes hydrate()&lt;/h3&gt;
&lt;p&gt;The first change to do in your code is to use hydrate() instead of render(). You can still use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render()&lt;/code&gt;, but it will become deprecated in React v17, but I would highly recomend use the new method in order to avoid warnings. So now, your code should be:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { hydrate } from &quot;react-dom&quot;;

...

ReactDOM.hydrate(
  &amp;lt;Provider store={store}&amp;gt;
    // Custom component with the react-router v4 routes centralized in a single component
    &amp;lt;CustomRoutes /&amp;gt;
  &amp;lt;/Provider&amp;gt;
  , document.getElementById('site-canvas'));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;new-way-of-matching-routes&quot;&gt;New way of matching routes&lt;/h3&gt;
&lt;p&gt;So now, there is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match()&lt;/code&gt; method from react-router to help us in matching any routes. I will not explain it since there are other websites that do that better then me.&lt;/p&gt;

&lt;p&gt;In order to match the routes, create a new function inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.use()&lt;/code&gt; context:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { StaticRouter, matchPath } from 'react-router-dom';

...

app.use(function(req, res){
  // Create store with the middlewares that you need, the `createStore` method from Redux and your reducers
  const store = applyMiddleware(multi, thunkMiddleware, apiMiddleware)(createStore)(reducers);
  
  // These variables are going to be used in the end, in order to have enought information to fetch the state from the rendered components
  let params = {},
      components = [];

  // Match routes
  function routerMatch(req, routes = null) {
    // For each route in the provided variable
    routes.map(route =&amp;gt; {
  
      // Check for any hierarchy. If so, use recursive
      if(route.routes &amp;amp;&amp;amp; !route.path){
        routerMatch(req, route.routes);

      }else{
        // Check for any match
        const match = matchPath(req.path, route);
        
        // If any, assign `params` to the object
        // And push the component to the `components` array
        if (match &amp;amp;&amp;amp; components.length==0){
          Object.assign(params, match.params);
          components.push(route.component);
        }
      }
    });
  }

  ...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this new version, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-router-dom&lt;/code&gt;, the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-router&lt;/code&gt; package, instead of using the  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;RouterContext /&amp;gt;&lt;/code&gt;, we should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;StaticRouter /&amp;gt;&lt;/code&gt; with all the routes as children.&lt;/p&gt;

&lt;p&gt;So now, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renderView()&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  function renderView() {
    const context = {};

    const InitialView = (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;StaticRouter location={req.url} context={context}&amp;gt;
            &amp;lt;RoutesObj /&amp;gt;
        &amp;lt;/StaticRouter&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );

    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, we should provite store to the provider in order to share it with the whole app. Then, we provide the current url and the context to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StaticRouter&lt;/code&gt;, in order to keep track of the current location and also detect any redirects.&lt;/p&gt;

&lt;p&gt;In the end, provide any routes that will be part of your app.&lt;/p&gt;

&lt;p&gt;Everything keeps almost the same:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    ...

    const componentHTML = ReactDOMServer.renderToString(InitialView);

    const initialState = store.getState();

    // Set HTML with the initial state and rendered components
    const HTML = `
      &amp;lt;!DOCTYPE html&amp;gt;
        &amp;lt;head&amp;gt;
          &amp;lt;title&amp;gt;This is a SSR post&amp;lt;/title&amp;gt;
          &amp;lt;script&amp;gt;
            window.__INITIAL_STATE__ = ${JSON.stringify(initialState)};
          &amp;lt;/script&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;body&amp;gt;
          &amp;lt;div id=&quot;site-canvas&quot;&amp;gt;&amp;lt;div&amp;gt;${componentHTML}&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/body&amp;gt;
       &amp;lt;/html&amp;gt;`;
    return HTML;
  }

  ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After creating the HTML, we search for a match with the router configuration and fetch all data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;components&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params&lt;/code&gt; variables:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ...

  // Get any match from the router configuration (`routesServer`)
  routerMatch(req, routesServer);

  // Fetch data from `needs` array
  fetchComponentData(store.dispatch, components, params)
      .then(renderView)
      .then(html =&amp;gt; res.end(html))
      .catch(err =&amp;gt; res.json({message:err.message}));
  }

}); // Closing `app.use()`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Keep in mind that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;routesServer&lt;/code&gt; must be a configuration array, just like in &lt;a href=&quot;https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-router-config&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matchPath&lt;/code&gt;, from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-router&lt;/code&gt;, will not work directly with Router components.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;why-not-rendertonodestream&quot;&gt;Why not renderToNodeStream?&lt;/h3&gt;
&lt;p&gt;React v16 also supports rendering from a Node stream using &lt;a href=&quot;https://reactjs.org/docs/react-dom-server.html#rendertonodestream&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;renderToNodeStream&lt;/a&gt;, but in this case, there is a gotcha, at least for some projects that I’m developing.&lt;/p&gt;

&lt;p&gt;If you are injecting dynamic data in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; constant, such as meta information, CSS or script files, then this method will not work since there is not possible to embed a Readable stream as an element in a component, just like we are doing in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; definition with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${componentHTML}&lt;/code&gt;. This is only possible with strings returned from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renderToString()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;in-the-end&quot;&gt;In the end…&lt;/h3&gt;
&lt;p&gt;Keep in mind that there are a few changes that must be performed in the client-side code, such as the routes configuration that should match the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-router&lt;/code&gt; version and documentation.&lt;/p&gt;

&lt;p&gt;These are major changes in the new version of React that in some cases, require a major refactor of your whole app, but at least SSR has only a few changes, based on the “older ways”.&lt;/p&gt;

&lt;p&gt;I hope that this article helps you migrating your code to the new React, and be free to comment in the section bellow with sugestions, questions and other solutions that would improve our code base.&lt;/p&gt;

&lt;h1 id=&quot;full-code&quot;&gt;Full code&lt;/h1&gt;
&lt;p&gt;Since the project repos are private for now, here I provide you the code for both versions, with comments to help understand each line of code.&lt;/p&gt;

&lt;h2 id=&quot;react-v15&quot;&gt;React v15&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...

//
//  React Server Render
//
app.use(function(req, res){
  // Create store with the middlewares that you need, the `createStore` method from Redux and your reducers
  const store = applyMiddleware(multi, thunkMiddleware, apiMiddleware)(createStore)(reducers);

  // Check any match with the given routes and current request location
  match({ routes: appRoutes, location: req.url }, function(err, redirectLocation, renderProps){
    
    // Handle server error
    if(err) {
      console.error(err);
      return res.status(500).end('Internal server error');
    }

    // If no match based on the props for the routing context, then give 404
    if(!renderProps)
      return res.status(404).end('Not found');

    function renderView() {
      const InitialView = (
        &amp;lt;Provider store={store}&amp;gt;
          &amp;lt;RouterContext {...renderProps} /&amp;gt;
        &amp;lt;/Provider&amp;gt;
      );
      // Render ReactJS Components
      const componentHTML = ReactDOM.renderToString(InitialView);      

      // Get initial state from store to append in the DOM
      const initialState = store.getState();

      // Set the JS Template to return
      const HTML = `
      &amp;lt;!DOCTYPE html&amp;gt;
        &amp;lt;head&amp;gt;
          &amp;lt;title&amp;gt;This is a SSR post&amp;lt;/title&amp;gt;
          &amp;lt;script&amp;gt;
            window.__INITIAL_STATE__ = ${JSON.stringify(initialState)};
          &amp;lt;/script&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;body&amp;gt;
          &amp;lt;div id=&quot;site-canvas&quot;&amp;gt;&amp;lt;div&amp;gt;${componentHTML}&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/body&amp;gt;
       &amp;lt;/html&amp;gt;`;

       return HTML;
    }
  
    // Fetch data from `needs` array
    fetchComponentData(store.dispatch, renderProps.components, renderProps.params)
      .then(renderView)
      .then(html =&amp;gt; res.end(html))
      .catch(err =&amp;gt; res.json({message:err.message}));
  });
});

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;react-v16&quot;&gt;React v16&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
// Libs
import React from 'react';
import ReactDOMServer from 'react-dom/server';
import { StaticRouter, matchPath } from 'react-router-dom';
import { Provider } from 'react-redux';
import { createStore } from 'redux';

// Components
import RoutesObj, {routesServer} from '../public/assets/scripts/routes/routes';

// Utils
import fetchComponentData  from './utils/fetchComponentData';

...

//
//  React Server Render
//
app.use(function(req, res){
  
  // Handle the request for the favicon
  // Otherwise, the `/*` route for the 404 will match in this case and break the routing
  if (req.url === '/favicon.ico') {
    res.writeHead(200, {'Content-Type': 'image/x-icon'} );
    res.end();
    console.log('favicon requested');
    return;

  }else{
    // Create store with the middlewares that you need, the `createStore` method from Redux and your reducers
    const store = applyMiddleware(multi, thunkMiddleware, apiMiddleware)(createStore)(reducers);

     // These variables are going to be used in the end, in order to have enought information to fetch the state from the rendered components
    let params = {},
      components = [];

    /**
     * Get match of routes
     */
    function routerMatch(req, routes = null) {

      routes.map(route =&amp;gt; {

        if(route.routes &amp;amp;&amp;amp; !route.path){
          routerMatch(req, route.routes);

        }else{
          // use `matchPath` here
          const match = matchPath(req.path, route);
          debug(&quot;Match of &quot;+req.path+&quot;:&quot;,match);

          if (match &amp;amp;&amp;amp; components.length==0){
            Object.assign(params, match.params);
            components.push(route.component);
          }
        }
      });
    }

    /**
     * Render view with data
     */
    function renderView() {
      // This context object contains the results of the render
      const context = {};

      const InitialView = (
        &amp;lt;Provider store={store}&amp;gt;
          &amp;lt;StaticRouter location={req.url} context={context}&amp;gt;
              &amp;lt;RoutesObj /&amp;gt;
          &amp;lt;/StaticRouter&amp;gt;
        &amp;lt;/Provider&amp;gt;
      );
      
      // context.url will contain the URL to redirect to if a &amp;lt;Redirect&amp;gt; was used
      if (context.url) {
        res.redirect(context.url);
        return;
      }

      // Render ReactJS Components
      const componentHTML = ReactDOMServer.renderToString(InitialView);      
      
      // Get initial state from store to append in the DOM
      const initialState = store.getState();
        
      // Set the JS Template to return
      const HTML = `
      &amp;lt;!DOCTYPE html&amp;gt;
        &amp;lt;head&amp;gt;
          &amp;lt;title&amp;gt;This is a SSR post&amp;lt;/title&amp;gt;
          &amp;lt;script&amp;gt;
            window.__INITIAL_STATE__ = ${JSON.stringify(initialState)};
          &amp;lt;/script&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;body&amp;gt;
          &amp;lt;div id=&quot;site-canvas&quot;&amp;gt;&amp;lt;div&amp;gt;${componentHTML}&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/body&amp;gt;
       &amp;lt;/html&amp;gt;`;

       return HTML;
    }

    // Get any match from the router configuration (`routesServer`)
    routerMatch(req, routesServer);
  
    // Fetch data from `needs` array
    fetchComponentData(store.dispatch, components, params)
      .then(renderView)
      .then(html =&amp;gt; res.end(html))
      .catch(err =&amp;gt; res.json({message:err.message}));
  }
});

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 15 Dec 2017 13:40:00 -0100</pubDate>
        <link>https://luisfbmelo.github.io//blog/2017/12/15/react-16-server-side-rendering/</link>
        <guid isPermaLink="true">https://luisfbmelo.github.io//blog/2017/12/15/react-16-server-side-rendering/</guid>
        
        
        <category>coding</category>
        
        <category>reactjs</category>
        
        <category>ssr</category>
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>Matilde - Pregnancy Photography</title>
        <description>&lt;p class=&quot;text-center&quot;&gt;
Last Sunday was an amazing day, I had the oportunity to photograph one of the most important events of my two friends’ life. Matilde is her name, and has about three more months in her mother’s belly. This was the first oportunity that I had to photograph a couple that is awaiting for their child, and since they are two amazing friends, it was a lot easier to interact and much more enjoyable.
&lt;/p&gt;

&lt;!--more--&gt;
&lt;p class=&quot;text-center&quot;&gt;
  Here I will show you some photographs of this shoot.
&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/1.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/1.jpg&quot; alt=&quot;Matilde&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/2.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/2.jpg&quot; alt=&quot;Matilde&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/3.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/3.jpg&quot; alt=&quot;Matilde&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/4.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/4.jpg&quot; alt=&quot;Matilde&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/5.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/5.jpg&quot; alt=&quot;Matilde&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/6.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/6.jpg&quot; alt=&quot;Matilde&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/7.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/7.jpg&quot; alt=&quot;Matilde&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/8.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/8.jpg&quot; alt=&quot;Matilde&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/9.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/9.jpg&quot; alt=&quot;Matilde&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/10.jpg&quot; data-toggle=&quot;lightbox&quot; data-gallery=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/blog/2016-07-06-matilde-pregnancy-photography/10.jpg&quot; alt=&quot;Matilde&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Jul 2016 23:03:00 +0000</pubDate>
        <link>https://luisfbmelo.github.io//blog/2016/07/06/matilde-pregnancy-photography/</link>
        <guid isPermaLink="true">https://luisfbmelo.github.io//blog/2016/07/06/matilde-pregnancy-photography/</guid>
        
        
        <category>photography</category>
        
        <category>portrait</category>
        
        <category>pregnancy</category>
        
      </item>
    
      <item>
        <title>AngularJS SEO with PHP</title>
        <description>&lt;p class=&quot;text-center&quot;&gt;
As a continuity of my last post about &lt;a href=&quot;http://luisfbmelo.com/blog/2015/10/31/angularjs-facebook-comments/&quot; title=&quot;Facebook Comments with AngularJS&quot;&gt;Facebook Comments with AngularJS&lt;/a&gt;, I present you a very common situation when developing a SPA (Single Page Application), &lt;strong&gt;SEO&lt;/strong&gt;.
&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/2015-12-04-angularjs-seo-with-php/angular-seo.jpg&quot; alt=&quot;AngularJS SEO with PHP&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;context&quot;&gt;Context&lt;/h1&gt;
&lt;p&gt;When developing a SPA, the information provided in the HTML has to be requested via AJAX with Javascript. This has great advantages, such as client-side rendering, avoid page refresh, amazing flexibility with DOM manipulation, web components, and so on. But with this paradise comes a curse. At the time of this post, web crawlers are still unable to render Javascript (except Google as far as I know) and as a result, they can not read any content that makes your web app amazing and if this happens, we start facing some major SEO issues.&lt;/p&gt;

&lt;p&gt;But why not, you ask? Well, if you have used AngularJS before you noticed the “#” character that shows up in the URL. This symbol is known as “fragment identifier” and the first intend when the internet showed up was to create anchors for links within a webpage, but now is also used to prevent page reload when dealing with AJAX-based webpages.&lt;/p&gt;

&lt;p&gt;Let’s say that you have a user profile page that you want to be able to share on Facebook, Twitter or other platform. These crawlers make use of metatags to retrieve the necessary data to display in those platforms and since we are using AngularJS, the most probable way of achieving this is by using the expression syntax &lt;strong&gt;{{ foo_bar }}&lt;/strong&gt;. As I said before, crawlers are unable to render Javascript and this is what will happen, e.g, in Facebook:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2015-12-04-angularjs-seo-with-php/screwed_post.png&quot; alt=&quot;Screwed up information from Facebook crawler&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center&quot; style=&quot;padding-bottom:20px;&quot;&gt;
&lt;em&gt;From &lt;a href=&quot;http://stackoverflow.com/questions/32380547/angularjs-spa-and-linking-from-social-media&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StackOverflow&lt;/a&gt;&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;Fear not, there are several solutions that can help you create a SEO Friendly SPAs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: this article is focused on a &lt;strong&gt;PHP solution&lt;/strong&gt; since my projects are stored in &lt;strong&gt;shared hosting&lt;/strong&gt; and I’m unable to install NodeJS or other specific technology that is not provided by the host.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;
&lt;p&gt;The solution is in providing static “snapshots” of your html with all content ready to be shown. That is why server-side rendered webpages don’t have this problem since it is all provided on each page load. In this example I will explain to you how this can be achieved with PHP (take a look also at the &lt;a href=&quot;http://www.yearofmoo.com/2012/11/angularjs-and-seo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhantomJS Solution&lt;/a&gt; for an automated solution, but that can not be applied in this example development environment).&lt;/p&gt;

&lt;p&gt;There are several steps needed to solve the problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set AngularJS to use crawler friendly URLs in order to “contact” the server first as a hub;&lt;/li&gt;
  &lt;li&gt;Configure Apache (.htaccess) to redirect all requests that come from crawlers;&lt;/li&gt;
  &lt;li&gt;Request the content from the API and provide the filled HTML.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;set-angularjs-to-use-crawler-friendly-urls&quot;&gt;Set AngularJS to use crawler friendly URLs&lt;/h3&gt;
&lt;p&gt;Right now, AngularJS is using the hash to provide content via Ajax. In order to start making direct &lt;em&gt;HTTP&lt;/em&gt; requests to the server, we must activate the &lt;em&gt;HTML5&lt;/em&gt; mode and start using &lt;em&gt;pushState&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var app = angular.module('myapp', []);

app.config(['$locationProvider', function($locationProvider) {

  //
  // Remove hash and use pushState
  //
  $locationProvider.html5Mode(true);

}]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By enabeling &lt;em&gt;HTML5&lt;/em&gt; mode, the app will start making use of the &lt;em&gt;HTML5 History API&lt;/em&gt; in order to provide nagivation between pages using URLs like &lt;strong&gt;www.myapp.com/app-page&lt;/strong&gt; without any page reload.&lt;/p&gt;

&lt;p&gt;Don’t forget also to place the &lt;strong&gt;&lt;base href=&quot;/&quot; /&gt;&lt;/strong&gt; tag next to the &lt;strong&gt;head&lt;/strong&gt; of your webpage, since the base URL is  used to resolve all relative URLs throughout the application regardless of the entry point into the app, unless you configure &lt;em&gt;$locationProvider&lt;/em&gt; to not require a base tag by passing a definition object with &lt;em&gt;requireBase:false&lt;/em&gt; to &lt;em&gt;$locationProvider.html5Mode()&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$locationProvider.html5Mode({
  enabled: true,
  requireBase: false
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now we must take care of the requests server-side.&lt;/p&gt;

&lt;h3 id=&quot;configure-apache&quot;&gt;Configure Apache&lt;/h3&gt;
&lt;p&gt;Since AngularJS now provides “normal” URLs (without the fragment identifier) and therefore, it is necessary to prepare it to respond.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before doing this, have in mind that there is necessary to have &lt;strong&gt;mod_rewrite, mod_proxy and mod_proxy_http&lt;/strong&gt; modules installed on your web server.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First of all, you need to specify what will be your main webpage for a normal user (non-crawler):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ifModule mod_rewrite.c&amp;gt;
  RewriteEngine On
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_URI} !index
  RewriteRule (.*) index.html [L]
&amp;lt;/ifModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we are doing here is creating a set of rules, rewrite rules, that verifies if the request has the destination of a non-existing file, directory (line 3 and 4) in order to allow access to real files and checks if the request URL is different from “index”.&lt;/p&gt;

&lt;p&gt;If these conditions are not met, then redirect to index.html will happen, were our SPA is runnable. This way, we ensure that every &lt;em&gt;HTTP&lt;/em&gt; request will redirect to the SPA and not to other file in the server if not intended.&lt;/p&gt;

&lt;p&gt;Now that we have the app runing, we must check if the &lt;em&gt;HTTP&lt;/em&gt; request comes from a crawler:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteCond %{HTTP_USER_AGENT} (facebookexternalhit/[0-9]|Twitterbot|Pinterest|Google.*snippet|Google)
RewriteRule myapp/page/(\d*)$ http://www.myapp.net/snapshots/page.php?id=$1 [P]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the first line, we have the ability to understand if the request comes from Facebook, Twitter, Pinterest or even Google. When true, we are able to write a set of rules that will provide information from a PHP file according to the requested URL. 
In the second line, by using the [P] we are also informing Apache to use a mod_proxy module, i.e., access page.php without the crawler knowing that a redirection has occured.&lt;/p&gt;

&lt;p&gt;With this set up, we will have this &lt;strong&gt;.htaccess&lt;/strong&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ifModule mod_rewrite.c&amp;gt;
   RewriteEngine On

  # allow social media crawlers to work by redirecting them to a server-rendered static version on the page
  RewriteCond %{HTTP_USER_AGENT} (facebookexternalhit/[0-9]|Twitterbot|Pinterest|Google.*snippet|Google)
  RewriteRule myapp/page/(\d*)$ http://www.myapp.com/snapshots/page.php?id=$1 [P]

  RewriteCond %{HTTP_USER_AGENT} (facebookexternalhit/[0-9]|Twitterbot|Pinterest|Google.*snippet|Google)
  RewriteRule myapp/page2/(\d*)$ http://www.myapp.com/snapshots/page2.php?id=$1 [P]

  ...

  # Required to allow direct-linking of pages so they can be processed by Angular
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_URI} !index
  RewriteRule (.*) index.html [L]
&amp;lt;/ifModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can prepare our PHP files to retrieve the necessary information.&lt;/p&gt;

&lt;h3 id=&quot;provide-the-html&quot;&gt;Provide the HTML&lt;/h3&gt;
&lt;p&gt;Assuming that you are using an API to get data, we are able to reuse it with the back-end script just like AngularJS does. Let’s have an example of a profile page:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
$API = 'http://www.myapp.com/api/';
$siteRoot = 'http://www.myapp.com/';
$imagesUrl = 'http://www.myapp.com/images/';

$jsonData = getData($API);
makePage($jsonData, $siteRoot, $imagesUrl);

// Request data from the API
function getData($api) {
    $id = (isset($_GET['id']) &amp;amp;&amp;amp; ctype_digit($_GET['id'])) ? $_GET['id'] : 1;
    $rawData = file_get_contents($api.'users/'.$id);
    return json_decode($rawData);
}

// Prepare variables for HTML
function makePage($data, $siteRoot, $imagesUrl) {
    $imageUrl = $imagesUrl . $data-&amp;gt;image-&amp;gt;url;
    $pageUrl = $siteRoot . &quot;user/details/&quot; . $data-&amp;gt;id;
    $title = 'User - '.$data-&amp;gt;name;
    $description = strip_tags($data-&amp;gt;description);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We start by defining all paths necessary to make the requests and print some specific data. After this, a request for the necessary data is executed through the API and the variables that will be used in our HTML are prepared.&lt;/p&gt;

&lt;p&gt;Now let’s fill the HTML:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;base href=&quot;/&quot;&amp;gt;
  &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;
    &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=no&quot;&amp;gt;
    &amp;lt;title&amp;gt;My App&amp;lt;/title&amp;gt;

    &amp;lt;!--META--&amp;gt;
    &amp;lt;!--facebook--&amp;gt;
    &amp;lt;meta property=&quot;fb:app_id&quot; content=&quot;{YOUR_APP_KEY}&quot;&amp;gt;
    &amp;lt;meta property=&quot;fb:admins&quot; content=&quot;{YOUR_ADMIN_KEY}&quot;/&amp;gt;

    &amp;lt;!--SEO--&amp;gt;
    &amp;lt;meta name=&quot;description&quot; content=&quot;&amp;lt;?php echo $description; ?&amp;gt;&quot;&amp;gt;
    &amp;lt;meta name=&quot;keywords&quot; content=&quot;&quot;&amp;gt;
    &amp;lt;meta name=&quot;author&quot; content=&quot;My App&quot;&amp;gt;

    &amp;lt;!-- Schema.org markup for Google+ --&amp;gt;
    &amp;lt;meta itemprop=&quot;name&quot; content=&quot;&amp;lt;?php echo $title; ?&amp;gt;&quot;&amp;gt;
    &amp;lt;meta itemprop=&quot;description&quot; content=&quot;&amp;lt;?php echo $description; ?&amp;gt;&quot;&amp;gt;
    &amp;lt;meta itemprop=&quot;image&quot; content=&quot;&amp;lt;?php echo $imageUrl; ?&amp;gt;&quot;&amp;gt;

    &amp;lt;!-- Twiter Cards --&amp;gt;
    &amp;lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&amp;gt;
    &amp;lt;meta name=&quot;twitter:site&quot; content=&quot;@myapp&quot;&amp;gt; 
    &amp;lt;meta name=&quot;twitter:title&quot; content=&quot;&amp;lt;?php echo $title; ?&amp;gt;&quot;&amp;gt;
    &amp;lt;meta name=&quot;twitter:description&quot; content=&quot;&amp;lt;?php echo $description; ?&amp;gt;&quot;&amp;gt;
    &amp;lt;meta name=&quot;twitter:image:src&quot; content=&quot;&amp;lt;?php echo $imageUrl; ?&amp;gt;&quot;&amp;gt;
    &amp;lt;!--/ Twiter Cards --&amp;gt;

    &amp;lt;!-- Open Graph --&amp;gt;
    &amp;lt;meta property=&quot;og:site_name&quot; content=&quot;My App&quot;&amp;gt;
    &amp;lt;meta property=&quot;og:type&quot; content=&quot;website&quot;&amp;gt;
    &amp;lt;meta property=&quot;og:title&quot; content=&quot;&amp;lt;?php echo $title; ?&amp;gt;&quot; /&amp;gt;
    &amp;lt;meta property=&quot;og:url&quot; content=&quot;&amp;lt;?php echo $pageUrl; ?&amp;gt;&quot;&amp;gt;
    &amp;lt;meta property=&quot;og:description&quot; content=&quot;&amp;lt;?php echo $description; ?&amp;gt;&quot;&amp;gt;
    &amp;lt;meta property=&quot;og:image&quot; content=&quot;&amp;lt;?php echo $imageUrl; ?&amp;gt;&quot;&amp;gt;
    &amp;lt;!--/ Open Graph --&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;img src=&quot;&amp;lt;?php echo $imageUrl; ?&amp;gt;&quot;&amp;gt;
  &amp;lt;h1&amp;gt;&amp;lt;?php echo $title; ?&amp;gt;&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;?php echo $description; ?&amp;gt;&amp;lt;/p&amp;gt;      
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example I provide the most common meta tags for the digital social media crawlers. Since Google crawler also gives a lot of relevance to content, it is equaly essencial to fill the body tag with the right semantic and information, boosting your rating and providing credibility to the crawler.&lt;/p&gt;

&lt;h1 id=&quot;lets-test-this-out&quot;&gt;Lets test this out&lt;/h1&gt;
&lt;p&gt;With everything set up, it is time to see if this solution is really working. There are tools online that provide some kind of validation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.facebook.com/tools/debug/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Facebook Open Graph Object Debugger&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.twitter.com/docs/cards/validation/validator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Twitter Card Validator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.pinterest.com/rich_pins/validator/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pinterest Rich Pin Validator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.google.com/webmasters/tools/richsnippets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Structured Data Testing tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have in mind that this is a final solution, and there are other alternatives that could suit you better and automate this process.
It is a major drawback that crawlers are still not ready to deal with these technologies that are transforming the internet and for now, we have to deal with it. Have also look at other solutions such as &lt;a href=&quot;https://prerender.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Prerender.io&lt;/a&gt; or &lt;a href=&quot;http://phantomjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhantomJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have other ideas and solutions, please be free to share because this is a problem that will chase us for a while.&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Dec 2015 20:24:00 -0100</pubDate>
        <link>https://luisfbmelo.github.io//blog/2015/12/04/angularjs-seo-with-php/</link>
        <guid isPermaLink="true">https://luisfbmelo.github.io//blog/2015/12/04/angularjs-seo-with-php/</guid>
        
        
        <category>coding</category>
        
        <category>angularjs</category>
        
        <category>devlog</category>
        
        <category>seo</category>
        
      </item>
    
      <item>
        <title>AngularJS - Implementing Facebook Comments plugin</title>
        <description>&lt;p class=&quot;text-center&quot;&gt;I'm here to present to you a problem and solution that I encountered in my latest project, implementing Facebook Comments.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/2015-10-31-angularjs-facebook-comments/angular-facebook-comments.jpg&quot; alt=&quot;Welcome!&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;context&quot;&gt;Context&lt;/h1&gt;
&lt;p&gt;Recently I developed an online platform that gathers a list of Portuguese descendent artists from all around the world for &lt;a href=&quot;http://mirateca.com/&quot; title=&quot;Miraceta Arts&quot;&gt;Miraceta Arts&lt;/a&gt;. One of the user stories for this project describes the need to provide a comment section for the events that are shown.&lt;/p&gt;

&lt;p&gt;The thing is, Facebook loads it’s comments asynchronous, and so does AngularJS but they don’t work together. The result of this lack of coordination is a blank space in the HTML since Facebook loads everything when the page finishes loading, but not knowing if AngularJS did also. To workaround this issue, it is necessary to combine them.&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;
&lt;p&gt;There are several steps needed to solve the problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.facebook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Create a Facebook API Key&lt;/a&gt; for your application;&lt;/li&gt;
  &lt;li&gt;Place the provided code from Facebook inside the body tag;&lt;/li&gt;
  &lt;li&gt;Make use of AngularJS directives to render the comments section.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;create-a-facebook-api-key&quot;&gt;Create a Facebook API Key&lt;/h3&gt;
&lt;p&gt;There is a simple process to create a API Key:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Login to Facebook&lt;/li&gt;
  &lt;li&gt;Access the &lt;a href=&quot;https://developers.facebook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Developers Section&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In the &lt;strong&gt;My Apps&lt;/strong&gt; menu, click in &lt;strong&gt;Add a New App&lt;/strong&gt;, and choose your app platform&lt;/li&gt;
  &lt;li&gt;Provide your app name and choose the category.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;place-facebook-code-inside-the-body-tag&quot;&gt;Place Facebook code inside the body tag&lt;/h3&gt;
&lt;p&gt;In order to initialize the Facebook Javascript SDK, it is necessary to place a specific code block at the begining of the &lt;em&gt;&amp;lt;body&amp;gt;&lt;/em&gt; tag:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!--FACEBOOK SDK--&amp;gt;
&amp;lt;script&amp;gt;
  window.fbAsyncInit = function() {
    FB.init({
      appId      : '&amp;lt;YOUR API KEY&amp;gt;',
      xfbml      : true,
      version    : 'v2.4'
    });
  };

  (function(d, s, id){
     var js, fjs = d.getElementsByTagName(s)[0];
     if (d.getElementById(id)) {return;}
     js = d.createElement(s); js.id = id;
     js.src = &quot;//connect.facebook.net/&amp;lt;lan_LAN&amp;gt;/sdk.js&quot;;
     fjs.parentNode.insertBefore(js, fjs);
   }(document, 'script', 'facebook-jssdk'));
&amp;lt;/script&amp;gt;
&amp;lt;!--END FACEBOOK--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Have in mind that you must replace &lt;em&gt;&amp;lt;YOUR API KEY&amp;gt;&lt;/em&gt; with the API key provided at the &lt;a href=&quot;https://developers.facebook.com/&quot; title=&quot;Facebook developers section&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Facebook developers section&lt;/a&gt;, and the &lt;em&gt;&amp;lt;lan_LAN&amp;gt;&lt;/em&gt; with the correct language that will be used for the localization (e.g., “en_EN”).&lt;/p&gt;

&lt;h3 id=&quot;angularjs-directives-to-render-the-comments-section&quot;&gt;AngularJS directives to render the comments section&lt;/h3&gt;
&lt;p&gt;Now that we have the required scripts to use the Facebook API, it is time to create our AngularJS directive for the comments section.
This directive will have other child directive that will be responsible to watch the page status and build the plugin. In order to reuse it, we must define the first directive:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var appDirectives = angular.module('appDirectives');

appDirectives.directive('facebookComments', ['$location', function ($location) {
  return {
      restrict: 'E',
      templateUrl: &quot;scripts/directives/facebookComments.html&quot;,
      scope:{},
      replace: true,
      link: function(scope, el, attr){
        scope.curPath = $location.absUrl();
      }
   };
}]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the previous code, we are creating a directive as an element &lt;em&gt;(E)&lt;/em&gt; with a template that will have the child directive. In order to avoid any scope conflicts, this directive will have a isolated one.
The most important part of this code is the link function. As this function will only be executed after finish compiling the directive, here we set the current path through the current absolute URL. This information will be used to inform the Facebook plugin which webpage the comments will be associated to.&lt;/p&gt;

&lt;p&gt;The second step consists in the directive template:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;div class=&quot;fb-comments&quot; dyn-fb-comment-box page-href=&quot;{{curPath}}&quot; data-numposts=&quot;5&quot; data-colorscheme=&quot;light&quot; data-width=&quot;100%&quot;&amp;gt;&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, we are going to use this template that will have as attributes the required parameters to initialize the comments plugin. As you can see, we are defining a set of important parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;curPath&lt;/strong&gt; variable from the parent directive scope to inform what will be the URL for the plugin;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;data-numposts&lt;/strong&gt; that will set the number of posts to be shown;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;data-colorscheme&lt;/strong&gt; to set the theme for the plugin;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;data-width&lt;/strong&gt; to 100% to make it responsive.&lt;/li&gt;
  &lt;li&gt;Make this div a directive through the &lt;strong&gt;dyn-fb-comment-box&lt;/strong&gt; attribute (directive name as attribute - &lt;em&gt;A&lt;/em&gt;) responsible for the plugin rendering.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this, it is time to set the child directive:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var appDirectives = angular.module('appDirectives');
appDirectives.directive('dynFbCommentBox',['$timeout', function ($timeout) {
    function createHTML(href, numposts, colorscheme, width) {
        return '&amp;lt;div class=&quot;fb-comments&quot; ' +
                       'data-href=&quot;' + href + '&quot; ' +
                       'data-numposts=&quot;' + numposts + '&quot; ' +
                       'data-colorsheme=&quot;' + colorscheme + '&quot; ' +
                       'data-width=&quot;' + width + '&quot;&amp;gt;' +
               '&amp;lt;/div&amp;gt;';
    }

    return {
        restrict: 'A',
        scope: {},
        link: function postLink(scope, elem, attrs) {
          //
          // Use timeout in order to be called after all watches are done and FB script is loaded
          //
          attrs.$observe('pageHref', function (newValue) {
              var href        = newValue;
              var numposts    = attrs.numposts    || 5;
              var colorscheme = attrs.colorscheme || 'light';
              var width = attrs.width || '100%';
              elem.html(createHTML(href, numposts, colorscheme, width));
              $timeout(function () {
                if (typeof FB != 'undefined'){
                    FB.XFBML.parse(elem[0]);
                  }
              });
          });

          
        }
    };
}]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Let’s analyze this directive.
As I stated before, this will be an attribute directive for the sake of simplicity with an isolated scope to avoid any conflicts with the parent. This directive has the purpose to watch/observe the &lt;em&gt;pageHref&lt;/em&gt; attribute to understand when the page has changed and gather all the necessary information from the directive attributes. Each attribute will then be passed as parameters to the function &lt;em&gt;createHtml()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This function will then overwrite the original html with a markup that is more &lt;em&gt;“Facebook plugin friendly”&lt;/em&gt;, i.e., to be recognized by the Facebook API and render the final script.&lt;/p&gt;

&lt;p&gt;In the end, we must call the &lt;em&gt;FB.XFBML.parse(&amp;lt;HTML&amp;gt;)&lt;/em&gt; to force the plugin to render after all the html and scripts finalize all rendering. To do this, the &lt;em&gt;$timeout()&lt;/em&gt; comes to action. By setting no delay, we can ensure that all the code inside it will be executed after everything finishes. Otherwise, the plugin would render, but since AngularJS is on its digest cycle and still rendering, the result will be a blank space.&lt;/p&gt;

&lt;p&gt;I hope this small tutorial will help anyone in need and difficulties with this plugin, and if you have any other better solutions, please share with everyone in the comments section bellow :smiley:.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Resources&lt;/strong&gt; &lt;br /&gt;
&lt;em&gt;Project Repo:&lt;/em&gt; &lt;a href=&quot;https://github.com/luisfbmelo/artistasluso&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Oct 2015 20:24:00 -0100</pubDate>
        <link>https://luisfbmelo.github.io//blog/2015/10/31/angularjs-facebook-comments/</link>
        <guid isPermaLink="true">https://luisfbmelo.github.io//blog/2015/10/31/angularjs-facebook-comments/</guid>
        
        
        <category>coding</category>
        
        <category>angularjs</category>
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>Welcome!</title>
        <description>&lt;p class=&quot;text-center&quot;&gt;Hello! Welcome to my fresh and new website!&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/2015-07-29-welcome/welcome.jpg&quot; alt=&quot;Welcome!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Out with the old, and in with the new! It has been a long journey, since I first developed my website, three years ago. A lot has changed, technology has evolved and, so too, has design. It is very important to keep up with the “industry”, its recent trends and to evolve accordingly.&lt;/p&gt;

&lt;p&gt;So, it is time to start from scratch. A version 2.0. This website is both responsive and easily accessible. The site will allow me to, not only, share my work and knowledge, but also assist you in the future. And I also intend to learn from your experiences, so all contributions are invited and welcome.&lt;/p&gt;

&lt;p&gt;This will be my “coffee shop”: a place to visit, share my design and development strategies, discover solutions and receive feedback from other like-minded users. I invite you to follow my website, comment and contribute to my online community.&lt;/p&gt;

&lt;p&gt;Oh, and feel free to share if you wish :smirk:&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jul 2015 23:22:00 +0000</pubDate>
        <link>https://luisfbmelo.github.io//blog/2015/07/29/welcome/</link>
        <guid isPermaLink="true">https://luisfbmelo.github.io//blog/2015/07/29/welcome/</guid>
        
        
        <category>generic</category>
        
      </item>
    
  </channel>
</rss>
